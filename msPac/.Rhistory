print(paste('MSE:', mean((logistic_pred_final != test_y))))
View(test_x)
nrow(pima_diabetes, Outcome = 1)
nrow(pima_diabetes, pima_diabetes$Outcome = 1)
yes = pima_diabetes$Outcome = 1
best_lambda = ridge_cv$lambda.min
print(paste('Best Lambda:', best_lambda))
ridge_cv_best_lambda = glmnet(train_x, train_y, alpha = 0, lambda = best_lambda, standardize = TRUE)
ridge_pred = predict(ridge_cv, s = best_lambda, newx = test_x)
ridge_cv_pred = predict(ridge_cv_best_lambda, test_x)
print(paste('MSE:', mean((ridge_cv_pred-test_y)^2)))
pima_diabetes <- read.csv("~/Desktop/pima_diabetes.csv")
View(pima_diabetes)
diabetes_data = pima_diabetes
summary(diabetes_data)
train = diabetes_data[1:383,]
test = diabetes_data[384:767,]
logistic = glm(Outcome~., data = train, family = binomial(link = 'logit'))
summary(logistic)
vif(logistic)
coef(logistic)
logistic_pred = predict(logistic,newdata=subset(test,select=c(1,2,3,4,5,6,7,8)),type='response')
logistic_pred_final= ifelse(fitted.results > 0.5,1,0)
coef(logistic)
logistic_pred = predict(logistic,newdata=subset(test,select=c(1,2,3,4,5,6,7,8)),type='response')
logistic_pred_final= ifelse(logistic_pred > 0.5,1,0)
print(paste('MSE:', mean((logistic_pred_final != test_y))))
coef(logistic)
logistic_pred = predict(logistic,newdata=subset(test,select=c(1,2,3,4,5,6,7,8)),type='response')
logistic_pred_final= ifelse(logistic_pred > 0.5,1,0)
print(paste('MSE:', mean((logistic_pred_final != test)))
train = diabetes_data[1:383,]
test = diabetes_data[384:767,]
x = model.matrix(Outcome~., diabetes_data)[,-1]
y = diabetes_data$Outcome
train_x = x[1:383,]
train_y = y[1:383]
test_x = x[384:767,]
test_y = y[384:767]
logistic = glm(Outcome~., data = train, family = binomial(link = 'logit'))
summary(logistic)
vif(logistic)
coef(logistic)
logistic_pred = predict(logistic,newdata=subset(test,select=c(1,2,3,4,5,6,7,8)),type='response')
logistic_pred_final= ifelse(logistic_pred > 0.5,1,0)
print(paste('MSE:', mean((logistic_pred_final != test_y)))
print(paste('MSE:', mean((logistic_pred_final != test_y))))
library(ROCR)
pr = prediction(fitted.results, test_y)
pr = prediction(logistic_pred_final, test_y)
library(ROCR)
pr = prediction(logistic_pred_final, test_y)
prf = performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
library(glmnet)
lambda = 10^seq(10, -2, length = 100)
ridge_cv = cv.glmnet(train_x, train_y, alpha = 0, nfolds = 10)
plot(ridge_cv)
best_lambda = ridge_cv$lambda.min
print(paste('Best Lambda:', best_lambda))
ridge_cv_best_lambda = glmnet(train_x, train_y, alpha = 0, lambda = best_lambda, standardize = TRUE)
ridge_pred = predict(ridge_cv, s = best_lambda, newx = test_x)
ridge_cv_pred = predict(ridge_cv_best_lambda, test_x)
print(paste('MSE:', mean((ridge_cv_pred-test_y)^2)))
lasso = glmnet(train_x, train_y, alpha = 1, lambda = lambda)
lasso_cv <- cv.glmnet(train_x, train_y, alpha = 1, lambda = lambda,standardize = TRUE, nfolds = 10)
plot(lasso_cv)
best_lambda_lasso = lasso_cv$lambda.min
lasso_cv_best_lambda = glmnet(train_x, train_y, alpha = 1, lambda = best_lambda_lasso, standardize = TRUE)
lasso_cv_pred = predict(lasso_cv_best_lambda, test_x)
print(paste('MSE:', mean((lasso_cv_pred-test_y)^2)))
read.csv('pima_diabetes.csv')
diabetes_data = pima_diabetes
summary(diabetes_data)
read.csv('pima_diabetes.csv')
diabetes_data = pima_diabetes
summary(diabetes_data)
diabetes_data = read.csv('pima_diabetes.csv')
summary(diabetes_data)
train = diabetes_data[1:383,]
test = diabetes_data[384:767,]
x = model.matrix(Outcome~., diabetes_data)[,-1]
y = diabetes_data$Outcome
train_x = x[1:383,]
train_y = y[1:383]
test_x = x[384:767,]
test_y = y[384:767]
logistic = glm(Outcome~., data = train, family = binomial(link = 'logit'))
summary(logistic)
library('VIF')
vif(logistic)
library('VIF')
vif(logistic)
vif(logistic)
library('car')
vif(logistic)
car::vif(logistic)
install.packages('pdflatex')
source('~/Desktop/pops2ms.R')
cols=2
tmp2
popn=rows*cols
print(date())
stime = Sys.time()
library(rmetasim)
source("pops2ms.R")
rows=2
cols=2
popn=rows*cols
pops=data.frame(pop=1:popn,row=1:popn,col=1,arrive=popn:1,source=0:(popn-1))
migmat=landscape.mig.matrix(h.dim=c(rows,cols),h=popn,s=2,
mig.model="distance",distance.fun=dweibull,
shape=1,scale=2)$R.int
print(length(migmat))
mig.entries = which(migmat>0,arr.ind=T)
dim(mig.entries)[1]
##hack for testing
texp=1.1 * max(pops$arrive)
nloci = 1
foundN = 1
if (dim(pops)[1]<100) popsamps=rep(10,dim(pops)[1]) else popsamps = sample(c(10,0),dim(pops)[1],T,prob=c(0.1,0.90))
popsizes = rep(1000,length(popsamps))
mutrate=1e-8
frag.length=80
island=NULL
line = pops2ms(pops,
migmat,
texp=texp,
nloci = nloci,
foundN = foundN,
popsizes = popsizes,
popsamps = popsamps,
mutrate = mutrate,
frag.length=frag.length,
island=island)
nsamp=strsplit(line[[1]]," ")[[1]][1]
nrep=strsplit(line[[1]]," ")[[1]][2]
print("running ms")
cat(file="line.txt",line[[2]])
tmp2 = system(paste("ms",nsamp,nrep,line[[2]]),intern=T)
tmp2
con <- dbConnect(MySQL(),dbname=toString(dbInfo[[1]]),user=toString(dbInfo[[2]]),password=toString(dbInfo[[3]]))
query <- paste("SELECT O.value, Pl.Accession_idAccession, T.name, E.name, F.Name FROM Observation O",
" JOIN IndividualPlant Pl ON O.IndividualPlant_idIndividualPlant = Pl.idIndividualPlant",
" JOIN Phenotype Ph ON O.Phenotype_idPhenotype = Ph.idPhenotype",
" JOIN Experiment E ON Pl.Experiment_idExperiment = E.idExperiment",
" JOIN Treatment T ON O.Treatment_idTreatment = T.idTreatment",
" JOIN Facility F ON Pl.Facility_idFacility = F.idFacility",
" WHERE",
expt,
treat,
" Ph.name = '",input$pheno,"'",
sep="")
#Partial Authorship by Nick Levitt
source("../global.R")
library(ggplot2)
library(gridExtra)
#### Define server logic required to summarize and view the selected dataset
dbInfo = read.table('../../dbInfo.txt')
shinyServer(function(input, output,session) {
allData = reactive({
expt= " "
treat=" "
con = dbConnect(MySQL(),dbname=toString(dbInfo[[1]]),user=toString(dbInfo[[2]]),password=toString(dbInfo[[3]]))
query <- paste("SELECT O.value, Pl.Accession_idAccession, T.name, E.name, F.Name FROM Observation O",
" JOIN IndividualPlant Pl ON O.IndividualPlant_idIndividualPlant = Pl.idIndividualPlant",
" JOIN Phenotype Ph ON O.Phenotype_idPhenotype = Ph.idPhenotype",
" JOIN Experiment E ON Pl.Experiment_idExperiment = E.idExperiment",
" JOIN Treatment T ON O.Treatment_idTreatment = T.idTreatment",
" JOIN Facility F ON Pl.Facility_idFacility = F.idFacility",
" JOIN GeneAccession GA ON Pl.Accession_idAccession = GA.Accession_idAccession",
" WHERE",
expt,
treat,
" Ph.name = '",input$pheno,"'",
sep="")
obstbl <- dbGetQuery(con,query)
names(obstbl) <- c("value","Accession","treatment","experiment","facility")
ret <- obstbl
ret$Treatment=ret$treatment
ret$Experiment=ret$experiment
ret$Facility=ret$facility
ret <- ret[order(ret$Accession,ret$Experiment,ret$Treatment,ret$Facility),c("value","Treatment","Experiment","Facility","Accession")]
#             ret <- ret[complete.cases(ret),]
dbDisconnect(con)
ret
})
values <- reactive({
if (is.null(input$expt)){expt=" "} else if (input$expt=="All"){expt=" "} else {expt=paste0(" E.name = '",input$expt,"' AND")}
if (input$treats=="All"){treat=" "} else {treat=paste0(" T.name = '",input$treats,"' AND")}
con <- dbConnect(MySQL(),dbname=toString(dbInfo[[1]]),user=toString(dbInfo[[2]]),password=toString(dbInfo[[3]]))
query <- paste("SELECT O.value, Pl.Accession_idAccession, T.name, E.name, F.Name FROM Observation O",
" JOIN IndividualPlant Pl ON O.IndividualPlant_idIndividualPlant = Pl.idIndividualPlant",
" JOIN Phenotype Ph ON O.Phenotype_idPhenotype = Ph.idPhenotype",
" JOIN Experiment E ON Pl.Experiment_idExperiment = E.idExperiment",
" JOIN Treatment T ON O.Treatment_idTreatment = T.idTreatment",
" JOIN Facility F ON Pl.Facility_idFacility = F.idFacility",
" WHERE",
expt,
treat,
" Ph.name = '",input$pheno,"'",
sep="")
obstbl <- dbGetQuery(con,query)
names(obstbl) <- c("value","Accession","treatment","experiment","facility")
if (dim(obstbl)[1]>0)
{
if (input$linemeans=="yes")
{
ret <- with(obstbl,aggregate(cbind(value),by=list(Accession=Accession,Treatment=treatment),mean))
ret <- ret[order(ret$value),c("value","Treatment","Accession")]
} else {
ret <- obstbl
ret$Treatment=ret$treatment
ret$Experiment=ret$experiment
ret$Facility=ret$facility
ret <- ret[order(ret$Accession,ret$Experiment,ret$Treatment,ret$Facility),c("value","Treatment","Experiment","Facility","Accession")]
}
#             ret <- ret[complete.cases(ret),]
} else {
ret <- data.frame(value=NA,Treatment=NA,Experiment=NA,Accession=NA)
}
dbDisconnect(con)
ret
})
output$msg <- renderText(
{
df <- values()
if (dim(df[complete.cases(df),])[1]==0)
{
paste("This combination of experiment (",input$expt,"), phenotype (",input$pheno,") and/or treatment (",input$treat,") does not exist in the database.  Try another combination")
} else {
paste("Experiment (",input$expt,"), Phenotype (",input$pheno,"), Treatment (",input$treats,")")
}
})
output$experiments = renderUI({
df = allData()
poss = unique(df$Experiment)
selectInput("expt", "Choose an experiment:",
choices = c("All",sort(poss)))
})
output$treats = renderUI({
df = allData()
if (input$expt != 'All') {
df = df[which(df$Experiment == input$expt),]
}
poss = unique(df$Treatment)
selectInput("treats", "Choose a treatment:",
choices = c(sort(poss),"All"), selected="control")
})
buildHist = function(df, select) {
if(length(df) == 0) {
}
else {
bins = input$breaks
if (bins == 0) {
bins = 1
}
bins = max(df$value) / bins
left <- (abs(diff(range(df$value)))*input$range[1])+min(df$value)
right <- (abs(diff(range(df$value)))*input$range[2])+min(df$value)
#          hist(df$value,xlab=paste("Value of",input$pheno),main=paste0("Exp:",input$expt,", Treat:",input$treat,", Pheno:",input$pheno),breaks = input$breaks)
#          rug(df$value)
#          abline(v=left,col="green",lwd=2)
#          abline(v=right,col="red",lwd=2)
xxx = ggplot(data=df,aes(value))
if(!select) {
xxx + geom_histogram(binwidth=bins, aes(fill=Treatment)) + geom_rug()  + geom_vline(xintercept=left,  colour='red',
linetype="dashed", size=1) +
geom_vline(xintercept=right,  colour='blue',
linetype="dashed", size=1) + ggtitle("Distribution for all samples")
}
else {
xxx + geom_histogram(binwidth=bins, aes(fill=Treatment)) + geom_rug() + ggtitle("Distribution for selected samples")
}
}
}
output$hist <- renderPlot( {
df <- as.data.frame(values())
plot = buildHist(df, FALSE)
plot
})
buildSelect = function(df) {
}
output$selectHist = renderPlot({
df <- values()
left <- (abs(diff(range(df$value)))*input$range[1])+min(df$value)
right <- (abs(diff(range(df$value)))*input$range[2])+min(df$value)
df <- df[(df$value>=left)&(df$value<=right),]
plot = buildHist(df, TRUE)
plot
})
output$stats = renderTable({
df <- values()
left <- (abs(diff(range(df$value)))*input$range[1])+min(df$value)
right <- (abs(diff(range(df$value)))*input$range[2])+min(df$value)
df <- df[(df$value>=left)&(df$value<=right),]
validate(
need(length(df$value) > 0, "Please select data using the sliders on the left")
)
numSamples = length(df$value)
allTreats = c('control','highwater','osmocote')
treats = df$Treatment
treatPercent = c()
for (i in 1:length(allTreats)) {
treatPercent[i] = (length(which(treats==allTreats[i])) / numSamples) * 100
}
Min = range(df$value)[1]
Max = range(df$value)[2]
Mean = mean(df$value)
StanD = sd(df$value)
stats = data.frame(numSamples, Min, Mean, Max, StanD,treatPercent[1],treatPercent[2],treatPercent[3])
names(stats) = c('Number of Samples','Min','Mean', 'Max', 'Standard Deviation',paste('Percent',allTreats[1]),paste('Percent',allTreats[2]),paste('Percent',allTreats[3]))
stats
})
output$linktable <- renderDataTable({
df <- values()
left <- (abs(diff(range(df$value)))*input$range[1])+min(df$value)
right <- (abs(diff(range(df$value)))*input$range[2])+min(df$value)
df <- df[(df$value>=left)&(df$value<=right),]
url.root = paste0(sep = '',"http://",session$clientData$url_hostname,":",
session$clientData$url_port,'/findline/?line=')
df$Accession <- paste0("<a href='",url.root, df$Accession, "' target='_blank'>",df$Accession,"</a>")
df
}, escape = FALSE)
output$downloadPlot = downloadHandler(
filename = function() {
paste("phenorange",Sys.Date(),"-",input$expt,"exp,",input$pheno,"phenos,",input$treats,"treats.png")
},
content = function(file) {
df <- values()
left <- (abs(diff(range(df$value)))*input$range[1])+min(df$value)
right <- (abs(diff(range(df$value)))*input$range[2])+min(df$value)
selectdf <- df[(df$value>=left)&(df$value<=right),]
plot1 = buildHist(df, FALSE)
plot2 = buildHist(selectdf, TRUE)
png(file)
device <- function(..., width, height) grDevices::png(..., width = width, height = height, res = 600, units = "in")
plots = grid.arrange(plot1, plot2, ncol=1)
dev.off()
}
)
output$downloadData <- downloadHandler(
filename = function() {
paste("phenorange",Sys.Date(),"-",input$expt,"exp,",input$pheno,"phenos,",input$treats,"treats.csv")                                        },
content = function(file) {
df <- values()
left <- (abs(diff(range(df$value)))*input$range[1])+min(df$value)
right <- (abs(diff(range(df$value)))*input$range[2])+min(df$value)
df <- df[(df$value>=left)&(df$value<=right),]
write.csv(file=file,df)
}
)
})
query
query <- paste("SELECT O.value, Pl.Accession_idAccession, T.name, E.name, F.Name FROM Observation O",
" JOIN IndividualPlant Pl ON O.IndividualPlant_idIndividualPlant = Pl.idIndividualPlant",
" JOIN Phenotype Ph ON O.Phenotype_idPhenotype = Ph.idPhenotype",
" JOIN Experiment E ON Pl.Experiment_idExperiment = E.idExperiment",
" JOIN Treatment T ON O.Treatment_idTreatment = T.idTreatment",
" JOIN Facility F ON Pl.Facility_idFacility = F.idFacility",
" JOIN GeneAccession GA ON Pl.Accession_idAccession = GA.Accession_idAccession",
" WHERE",
expt,
treat,
" Ph.name = '",input$pheno,"'",
sep="")
expt= " "
treat=" "
con = dbConnect(MySQL(),dbname=toString(dbInfo[[1]]),user=toString(dbInfo[[2]]),password=toString(dbInfo[[3]]))
query <- paste("SELECT O.value, Pl.Accession_idAccession, T.name, E.name, F.Name FROM Observation O",
" JOIN IndividualPlant Pl ON O.IndividualPlant_idIndividualPlant = Pl.idIndividualPlant",
" JOIN Phenotype Ph ON O.Phenotype_idPhenotype = Ph.idPhenotype",
" JOIN Experiment E ON Pl.Experiment_idExperiment = E.idExperiment",
" JOIN Treatment T ON O.Treatment_idTreatment = T.idTreatment",
" JOIN Facility F ON Pl.Facility_idFacility = F.idFacility",
" JOIN GeneAccession GA ON Pl.Accession_idAccession = GA.Accession_idAccession",
" WHERE",
expt,
treat,
" Ph.name = '",input$pheno,"'",
sep="")
shiny::runApp('Current Classes/Independent_Study/unpak-shiny/phenoexplore')
runApp('Current Classes/Independent_Study/unpak-shiny/phenoexplore')
runApp('Current Classes/Independent_Study/unpak-shiny/phenoexplore')
runApp('Current Classes/Independent_Study/unpak-shiny/phenoexplore')
shiny::runApp('Current Classes/Independent_Study/unpak-shiny/phenoexplore')
runApp('Current Classes/Independent_Study/unpak-shiny/phenoexplore')
runApp('Current Classes/Independent_Study/unpak-shiny/phenoexplore')
?seqgen
source('~/Desktop/Research/msPac_Final/testms-2.R', echo=TRUE)
ouput
new_tree
output
source('~/Desktop/Research/msPac_Final/testms-2.R', echo=TRUE)
output_seqgen
source('~/Desktop/Research/msPac_Final/testms-2.R', echo=TRUE)
source('~/Desktop/Research/msPac_Final/testms-2.R', echo=TRUE)
source('~/Desktop/Research/msPac_Final/testms-2.R', echo=TRUE)
source('~/Desktop/Research/msPac_Final/testms-2.R', echo=TRUE)
output_seqgen
library(tictoc)
library(rmetasim)
library(phyclust)
library(msPac)
setwd("~/Desktop/Research/msPac_Final")
source("pops2ms.R")
setwd("~/Desktop/Research/msPac_Final/msPac")
rows= 5
cols= rows
popn=rows*cols
pops=data.frame(pop=1:popn,row=1:popn,col=1,arrive=popn:1,source=0:(popn-1))
migmat=landscape.mig.matrix(h.dim=c(rows,cols),h=popn,s=2,
mig.model="distance",distance.fun=dweibull,
shape=1,scale=2)$R.int
mig.entries = which(migmat>0,arr.ind=T)
##hack for testing
texp=1.1 * max(pops$arrive)
nloci = 1
foundN = 1
if (dim(pops)[1]<100) popsamps=rep(10,dim(pops)[1]) else popsamps = sample(c(2,2),dim(pops)[1],T,prob=c(0.1,0.90))
popsizes = rep(1000,length(popsamps))
mutrate=1e-8
frag.length=80
island=NULL #rewrite new pops function if going to change island
new_tree = pops2ms_new(pops,
migmat,
texp=texp,
nloci = nloci,
foundN = foundN,
popsizes = popsizes,
popsamps = popsamps,
mutrate = mutrate,
frag.length=frag.length,
island=island)
output_seqgen = seqgen(opts = "-mHKY -l40 -q -x output.txt", newick.tree = new_tree)
output_seqgen
new_tree
library(tictoc)
library(rmetasim)
library(phyclust)
library(msPac)
setwd("~/Desktop/Research/msPac_Final")
source("pops2ms.R")
setwd("~/Desktop/Research/msPac_Final/msPac")
rows= 5
cols= rows
popn=rows*cols
pops=data.frame(pop=1:popn,row=1:popn,col=1,arrive=popn:1,source=0:(popn-1))
migmat=landscape.mig.matrix(h.dim=c(rows,cols),h=popn,s=2,
mig.model="distance",distance.fun=dweibull,
shape=1,scale=2)$R.int
mig.entries = which(migmat>0,arr.ind=T)
##hack for testing
texp=1.1 * max(pops$arrive)
nloci = 1
foundN = 1
if (dim(pops)[1]<100) popsamps=rep(10,dim(pops)[1]) else popsamps = sample(c(2,2),dim(pops)[1],T,prob=c(0.1,0.90))
popsizes = rep(1000,length(popsamps))
mutrate=1e-8
frag.length=80
island=NULL #rewrite new pops function if going to change island
new_tree = pops2ms_new(pops,
migmat,
texp=texp,
nloci = nloci,
foundN = foundN,
popsizes = popsizes,
popsamps = popsamps,
mutrate = mutrate,
frag.length=frag.length,
island=island)
output_seqgen = seqgen(opts = "-mHKY -l40 -q -x output.txt", newick.tree = new_tree)
output_seqgen
library(tictoc)
library(rmetasim)
library(phyclust)
library(msPac)
setwd("~/Desktop/Research/msPac_Final")
source("pops2ms.R")
setwd("~/Desktop/Research/msPac_Final/msPac")
rows= 5
cols= rows
popn=rows*cols
pops=data.frame(pop=1:popn,row=1:popn,col=1,arrive=popn:1,source=0:(popn-1))
migmat=landscape.mig.matrix(h.dim=c(rows,cols),h=popn,s=2,
mig.model="distance",distance.fun=dweibull,
shape=1,scale=2)$R.int
mig.entries = which(migmat>0,arr.ind=T)
##hack for testing
texp=1.1 * max(pops$arrive)
nloci = 1
foundN = 1
if (dim(pops)[1]<100) popsamps=rep(10,dim(pops)[1]) else popsamps = sample(c(2,2),dim(pops)[1],T,prob=c(0.1,0.90))
popsizes = rep(1000,length(popsamps))
mutrate=1e-8
frag.length=80
island=NULL #rewrite new pops function if going to change island
new_tree = pops2ms_new(pops,
migmat,
texp=texp,
nloci = nloci,
foundN = foundN,
popsizes = popsizes,
popsamps = popsamps,
mutrate = mutrate,
frag.length=frag.length,
island=island)
new_tree
line[[2]]
output_seqgen = seqgen(opts = "-mHKY -l40 -q ", newick.tree = new_tree)
mainFile = file("seqGenOutput_Pop25_Popsamps2.txt")
write(output_seqgen, mainFile)
